
MONGO_URL=mongodb+srv://yamini9984:Yamini@221fa04617.pfctx.mongodb.net/?retryWrites=true&w=majority&appName=221FA04617
PORT=3000
SECRET_KEY=your_secret_key


# // Import necessary modules
# const express = require('express');
# const mongoose = require('mongoose');
# const User = require('./models/User');
# const Counter = require('./models/Counter'); // Import the Counter model
# const app = express();
# const PORT = process.env.PORT || 3000;

# // Middleware to parse JSON data
# app.use(express.json());

# // Serve static files from the "public" directory
# app.use(express.static('public'));

# // MongoDB connection
# mongoose.connect('mongodb://localhost:27017/registration', {
#     useNewUrlParser: true,
#     useUnifiedTopology: true
# })
# .then(() => console.log('Connected to MongoDB'))
# .catch(err => console.log('Error connecting to MongoDB:', err));

# // Redirect root URL to the event.html page
# app.get('/', (req, res) => {
#     res.redirect('/event/event.html'); // Redirects to the event.html page
# });

# // POST route to register a user
# app.post('/register', async (req, res) => {
#     const { firstName, lastName, email, phoneNumber, gender, collegeName } = req.body;

#     try {
#         // Check if the user already exists with the provided email
#         const existingUserByEmail = await User.findOne({ email });
#         if (existingUserByEmail) {
#             return res.status(400).json({ message: 'Email already registered' });
#         }

#         // Retrieve and update the counter for userId
#         const counter = await Counter.findOneAndUpdate(
#             { _id: 'userId' },
#             { $inc: { userId: 1 } },
#             { new: true, upsert: true }
#         );

#         // Generate a unique user ID in the format MH25X
#         const newUserId = MH25${counter.userId};

#         // Create a new user with the provided data
#         const newUser = new User({
#             firstName,
#             lastName,
#             email,
#             phoneNumber,
#             gender,
#             collegeName,
#             userId: newUserId // Use the generated userId
#         });

#         // Save user to the database
#         await newUser.save();
        
#         console.log('New user registered:', newUser); // Log the newly registered user
#         res.status(201).json({ message: 'Registration successful!', userId: newUserId });
#     } catch (error) {
#         console.error('Registration error:', error);
#         res.status(500).json({ message: 'Error registering user', error: error.message });
#     }
# });

# app.post('/login', async (req, res) => {
#     const { userId } = req.body;

#     try {
#         // Check if userId is provided
#         if (!userId) {
#             return res.status(400).json({ message: 'User ID is required' });
#         }

#         // Fetch the user by userId
#         const user = await User.findOne({ userId });
#         if (!user) {
#             console.log(Login failed: User ID not found - ${userId}); // Log failed login attempt
#             return res.status(404).json({ message: 'User not found' });
#         }

#         // Generate the final ID for the event
#         const eventType = "T"; // Use your logic to determine event type
#         const eventNumber = 1;  // Use your logic to determine event number
#         const finalID = generateFinalID(userId, eventType, eventNumber);

#         res.status(200).json({ message: 'Login successful', finalID });
#     } catch (error) {
#         console.error('Error logging in:', error); // Log the error for debugging
#         res.status(500).json({ message: 'Error logging in', error });
#     }
# });


# // POST route to register for an event (optional)
# app.post('/register-event', async (req, res) => {
#     const { userId, eventType, eventNumber } = req.body;

#     try {
#         // Fetch the user by userId
#         const user = await User.findOne({ userId });
#         if (!user) {
#             return res.status(404).json({ message: 'User not found' });
#         }

#         // Generate the final event ID
#         const finalID = generateFinalID(userId, eventType, eventNumber);
        
#         res.status(201).json({ message: 'Event registered successfully', finalID });
#     } catch (error) {
#         res.status(500).json({ message: 'Error registering for event', error });
#     }
# });

# // Function to generate the final ID
# const generateFinalID = (userId, eventType, eventNumber) => {
#     return ${userId}-${eventType}${eventNumber};
# };

# // Start the server and listen on the specified port
# app.listen(PORT, () => {
#     console.log(Server is running on http://localhost:${PORT});
# });
